{"version":3,"sources":["components/Navbar.js","components/Chart.js","components/Result.js","components/Form.js","components/Landing.js","components/Register.js","components/Login.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Navbar","className","to","id","Chart","props","data","labels","quoteData","map","item","name","datasets","label","backgroundColor","borderColor","color","borderWidth","hoverBackgroundColor","hoverBorderColor","score","console","log","width","height","options","maintainAspectRatio","legend","fontColor","scales","xAxes","barThickness","ticks","yAxes","beginAtZero","suggestedMax","Result","resultsList","location","state","quoteAnalysis","index","key","Math","floor","quote","length","type","value","Form","submitted","handleOnChange","e","setState","target","handleOnSubmit","a","preventDefault","includes","replace","fetch","method","body","JSON","stringify","headers","response","json","parsedResponse","this","pathname","onSubmit","autoComplete","onChange","Component","Landing","Register","useState","email","password","passwordCheck","logged","registerData","setRegisterData","onChangeHandler","newUser","parsedUserResponse","placeholder","required","Login","loginData","setLoginData","loginUser","parsedLoginResponse","my404","App","exact","path","render","component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8c0aff50.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Navbar = () => {\n  return(\n    <div className=\"navbar-fixed\">\n      <nav>\n        <div className=\"nav-wrapper\">\n          <Link to=\"/\"><i className=\"left far fa-eye\"/></Link>\n          <Link to=\"/\" className=\"brand-logo center title main-title\">Watch Your Tone</Link>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/register\">Register</Link></li>\n            <li><Link to=\"/login\">Login</Link></li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  )\n}\n\nexport default Navbar;","import React, {Component} from 'react';\nimport {Bar} from 'react-chartjs-2';\n\nconst Chart = (props) => {  \n  const labels = props.quoteData.map(item => {\n    return item.name\n  })\n\n  const scores = props.quoteData.map(item => {\n    return item.score\n  })\n  \n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        label: 'match %',\n        backgroundColor: 'rgba(255,255,255,0.2)',\n        borderColor: 'rgba(255,99,132,1)',\n        color: 'rgba(255,255,255)',\n        borderWidth: 1,\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n        data: scores\n      }\n    ]\n  };\n\n  console.log(props.quoteData, '<--props in Chart.js')\n  return (\n    <Bar\n      data={data}\n      width={50}\n      height={25}\n      options={{\n        maintainAspectRatio: true,\n        legend: {\n          labels: {\n            fontColor: 'rgba(255,255,255)'\n          }\n        },\n        scales: {\n          xAxes: [{\n            barThickness: 60,\n              ticks: {\n                fontColor: 'rgba(255,255,255)'\n              }\n          }],\n          yAxes: [{\n            ticks: {\n              fontColor: 'rgba(255,255,255)',\n              beginAtZero: true,\n              suggestedMax: 1.0\n            }\n          }]\n        }\n      }}\n    />\n  )\n}\n\nexport default Chart;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport Chart from './Chart'\n\nconst Result = (props) => {\n\n  const resultsList = props.location.state.quoteAnalysis.map((item, index) => {\n    return (\n      <li key={index} className=\"results-item\">\n        {`${item.name}`}<br/><span id=\"results-number\">{`${Math.floor(item.score * 100)}% `}</span>match<br/><br/>\n      </li>\n    )\n  })\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h3 id=\"results-quote\">{`\"${props.location.state.quote}\"`}</h3>\n        <div id=\"results-div\">\n          <p id=\"results-header\">Results</p>\n          <ul id=\"results-list\">\n            {resultsList.length ? \n              resultsList \n              : \"No tone detected. Try a longer quote - no jibberish.\"}\n          </ul>\n        </div>\n        {resultsList.length &&   \n          <div id=\"chart-div\">\n            <Chart quoteData={props.location.state.quoteAnalysis}/>\n          </div>\n        }\n        <Link to=\"/\">\n          <input type=\"submit\" className=\"submit-btn btn\" value=\"back\"/>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Result;","import React, {Component} from 'react';\nimport {Redirect} from 'react-router-dom';\n// import { threadId } from 'worker_threads';\n\nclass Form extends Component {\n  \n  state = {\n    submitted: false,\n    quote: '',\n    quoteAnalysis: []\n  }\n\n  handleOnChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleOnSubmit = async (e) => {\n    e.preventDefault();\n\n    //clean up entered quote\n    if (this.state.quote.includes('\"') || this.state.quote.includes(\"'\")) {\n      let quote = this.state.quote;\n      while (quote.includes('\"') || quote.includes(\"'\")) {\n        quote = quote.replace('\"', '');\n        quote = quote.replace(\"'\", '');\n      }\n      this.setState({quote})\n    }\n\n    const response = await fetch(`/api/quotes/analyze`, {\n      method: 'POST',\n      body: JSON.stringify({quote: this.state.quote}),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const parsedResponse = await response.json();\n    this.setState({\n      submitted: true,\n      quoteAnalysis: parsedResponse.data\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n        {\n          this.state.submitted && \n          <Redirect to={{\n            pathname: '/result',\n            state: {\n              quote: this.state.quote,\n              quoteAnalysis: this.state.quoteAnalysis\n            }\n          }}/>\n        }\n\n        <form onSubmit={this.handleOnSubmit}>\n          <i className=\"fas fa-arrow-down\"/>\n          <input type=\"text\" id=\"input-quote\" autoComplete=\"off\" value={this.state.quote} name=\"quote\" onChange={this.handleOnChange}/>\n          <input type=\"submit\" className=\"submit-btn btn\" value=\"analyze\"/>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Form;","import React, {Component} from 'react';\nimport Form from './Form'\n\nclass Landing extends Component {\n  state = {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <p id=\"instructions\">Input your quote here!</p>\n          <Form />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Landing;","import React, {Fragment, useState} from 'react';\nimport {Redirect} from 'react-router-dom';\n\nconst Register = () => {\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    password: '',\n    passwordCheck: '',\n    logged: false\n  })\n\n  const onChangeHandler = (e) => {\n    setRegisterData({\n      ...registerData, \n      [e.target.name]: e.target.value\n    });\n  }\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (registerData.password !== registerData.passwordCheck) console.log('passwords don\\'t match');\n    else {\n      const newUser = {\n        email: registerData.email,\n        password: registerData.password\n      }\n\n      try {\n        const response = await fetch(`/api/users`, {\n          method: 'POST',\n          body: JSON.stringify(newUser),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n\n        const parsedUserResponse = await response.json()\n        console.log(parsedUserResponse, '<--- parsed user response containing JWT')\n        setRegisterData({\n          ...registerData,\n          logged: true\n        })\n      } catch (err) {\n        console.log('Register User Error: ', err)\n      }\n    }\n  }\n\n  return (\n    <Fragment>\n      {\n        registerData.logged &&\n        <Redirect to='/'/>\n      }\n      <h4>Register</h4>\n      <div className=\"container\">\n        <form className=\"form center-align\" id=\"register-form\" onSubmit={onSubmit}>\n          <input type=\"email\" placeholder=\"email\" name=\"email\" value={registerData.email} onChange={onChangeHandler} required/>\n          <input type=\"password\" placeholder=\"password\" name=\"password\" value={registerData.password} onChange={onChangeHandler} required/>\n          <input type=\"password\" placeholder=\"re-type password\" name=\"passwordCheck\" value={registerData.passwordCheck} onChange={onChangeHandler} required/>\n          <input type=\"submit\" className=\"submit-btn btn\" value=\"Create Account\"/>\n        </form>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Register;","import React, {Fragment, useState} from 'react';\nimport {Redirect} from 'react-router-dom';\n\nconst Login = () => {\n  const [loginData, setLoginData] = useState({\n    email: '',\n    password: '', \n    logged: false\n  })\n\n  const onChangeHandler = (e) => {\n    setLoginData({...loginData, [e.target.name]: e.target.value});\n  }\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const loginUser = {\n      email: loginData.email,\n      password: loginData.password\n    }\n\n    try {\n      const response = await fetch(`/api/users/login`, {\n        method: 'POST',\n        body: JSON.stringify(loginUser),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      const parsedLoginResponse = await response.json()\n      console.log(parsedLoginResponse, '<--- parsed login response containing JWT')\n      setLoginData({\n        ...loginData,\n        logged: true\n      })\n\n    } catch (err) {\n      console.log('Register User Error: ', err)\n    }\n  }\n\n  return (\n    <Fragment>\n      {\n        loginData.logged &&\n        <Redirect to='/'/>\n      }\n\n      <h4>Log In</h4>\n      <div className=\"container\">\n        <form className=\"form center-align\" id=\"register-form\" onSubmit={onSubmit}>\n          <input type=\"email\" placeholder=\"email\" name=\"email\" value={loginData.email} onChange={onChangeHandler} required/>\n          <input type=\"password\" placeholder=\"password\" name=\"password\" value={loginData.password} onChange={onChangeHandler} required/>\n          <input type=\"submit\" className=\"submit-btn btn\" value=\"Log In\"/>\n        </form>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default Login;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Result from './components/Result';\nimport Landing from './components/Landing';\nimport Register from './components/Register';\nimport Login from './components/Login';\n\nconst my404 = () => {\n  return (\n    <div>\n      Where do you think you're going?\n    </div>\n  )\n}\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <main>\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\" render={(props) => <Landing {...props} />}/>\n          <Route exact path=\"/result\" render={(props) => <Result {...props} />}/>\n          <Route exact path=\"/login\" component={Login}/>\n          <Route exact path=\"/register\" component={Register}/>\n          <Route component={my404} />\n        </Switch>\n      </main>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}